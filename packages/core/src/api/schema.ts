/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/backend/widget/v2/config': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getWidgetConfig'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/prelude': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['widgetPrelude'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/sessions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getSessions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/session/history/{sessionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getSessionHistory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/poll/{sessionId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['pollSessionAndHistory'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/create-session': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createChatSession'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/chat/send': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['chatSend'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/checkpoint': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createStateCheckpoint'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/upload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['uploadFile'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/upload/v2': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['uploadFileV2'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/chat/vote': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['voteMessage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/session/resolve': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['resolveSession'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/contact/create-unverified': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['createUnverifiedContact'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/action/execute': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['executeAction'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/backend/widget/v2/submit-csat': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['submitCsat'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    AssigneeKindEnum: 'human' | 'ai' | 'none';
    CreateUnverifiedContactDto: {
      email?: string;
      non_verified_name?: string;
      non_verified_custom_data?: {
        [key: string]: string | number | boolean;
      };
    };
    CreateWidgetSessionDto: {
      customData?: {
        [key: string]: string | number | boolean | unknown | unknown;
      };
    };
    FileUploadDto: {
      /** Format: binary */
      file: string;
    };
    /** @enum {string} */
    MessageTypeEnum:
      | 'agent_comment'
      | 'agent_joined'
      | 'agent_message'
      | 'agent_reopened_session'
      | 'agent_took_session_from_ai'
      | 'ai_assumed_the_session_resolved'
      | 'ai_decided_to_resolve_the_issue'
      | 'csat_requested'
      | 'csat_submitted'
      | 'email_draft_message'
      | 'handoff'
      | 'handoff_to_salesforce_miaw'
      | 'handoff_to_zendesk'
      | 'message'
      | 'state_checkpoint'
      | 'user_confirmed_the_session_resolved';
    /** @description Paginated response. */
    PaginatedWidgetSessionsDto: {
      items: {
        /** Format: uuid */
        id: string;
        ticketNumber: number;
        createdAt: string;
        updatedAt: string;
        isHandedOff: boolean;
        isOpened: boolean;
        assignee: {
          kind: components['schemas']['AssigneeKindEnum'];
          name: string | null;
          avatarUrl: string | null;
        };
        channel: string;
        isVerified: boolean;
        lastMessage: string | null;
        modeId: string | null;
        latestStateCheckpointPayload: {
          [key: string]: unknown;
        } | null;
      }[];
      /** @description The `cursor` for the request to get the next set of items. Null if there is no more data. */
      next: string | null;
    };
    /** @enum {string} */
    SenderTypeEnum: 'user' | 'agent' | 'ai' | 'system' | 'unknown';
    SystemMessagePayload:
      | {
          /** @enum {string} */
          type: 'state_checkpoint';
          payload: {
            [key: string]: unknown;
          } | null;
        }
      | {
          /** @enum {string} */
          type: 'csat_requested';
          payload?: unknown;
        }
      | {
          /** @enum {string} */
          type: 'csat_submitted';
          payload: {
            score?: number | null;
            feedback?: string | null;
          };
        }
      | {
          /** @enum {string} */
          type: 'none';
          payload?: unknown;
        };
    UploadWidgetFileResponseDto: {
      fileName: string;
      fileUrl: string;
    };
    WidgetActionFormSubmissionInputDto: {
      sessionId: string;
      formMessageId: string;
      actionId: string;
      request: {
        queryParams?: {
          [key: string]: string;
        };
        pathParams?: {
          [key: string]: string;
        };
        bodyParams?: {
          [key: string]: unknown;
        };
        headers?: {
          [key: string]: string;
        };
      };
    };
    WidgetActionFormSubmissionOutputDto: {
      action: {
        response?: unknown;
      };
    };
    WidgetConfigDto: {
      org: {
        id: string;
        name: string;
      };
      sessionsPollingIntervalSeconds: number;
      sessionPollingIntervalSeconds: number;
      modes: {
        id: string;
        name: string;
        slug?: string | null;
      }[];
    };
    WidgetContactTokenResponseDto: {
      /** @description The JWT token to use for further requests */
      token: string;
    };
    WidgetCreateStateCheckpointInputDto: {
      session_id: string;
      payload: {
        [key: string]: unknown;
      };
    };
    WidgetCreateStateCheckpointOutputDto: {
      success: boolean;
    };
    WidgetHistoryDto: {
      publicId: string;
      type: components['schemas']['MessageTypeEnum'];
      content: {
        text?: string | null;
      };
      sender: {
        kind: components['schemas']['SenderTypeEnum'];
        name?: string | null;
        avatar?: string | null;
      };
      sentAt?: string | null;
      actionCalls?:
        | {
            actionName: string;
            args?: unknown;
            result?: unknown;
            action: {
              name: string;
              id: string;
              openapi?: {
                openapi_spec_id?: string;
                operation_spec?: unknown;
                operation_id?: string;
                operation_method?: string;
              };
              metadata?: unknown;
              required_form_submission?: boolean;
            };
          }[]
        | null;
      attachments?:
        | {
            id: string;
            name: string;
            size: number;
            type: string;
            url: string;
          }[]
        | null;
      systemMessagePayload: components['schemas']['SystemMessagePayload'];
    };
    WidgetPreludeDto: {
      initialQuestions: string[];
      aiEnabled: boolean;
      officeHours: unknown & {
        monday?: {
          from: string;
          to: string;
        };
        tuesday?: {
          from: string;
          to: string;
        };
        wednesday?: {
          from: string;
          to: string;
        };
        thursday?: {
          from: string;
          to: string;
        };
        friday?: {
          from: string;
          to: string;
        };
        saturday?: {
          from: string;
          to: string;
        };
        sunday?: {
          from: string;
          to: string;
        };
        Everyday?: {
          from: string;
          to: string;
        };
        WeekDays?: {
          from: string;
          to: string;
        };
      };
      officeHoursTimezone: string | null;
      organizationName: string;
    };
    WidgetResolveSessionInputDto: {
      session_id: string;
    };
    WidgetSendMessageInputDto: {
      /** Format: uuid */
      uuid: string;
      content: string;
      session_id: string;
      bot_token: string;
      /** @description Additional headers to be included in the request of action calls */
      headers?: {
        [key: string]: string;
      } | null;
      /** @description Additional query parameters to be included in the query of action calls */
      query_params?: {
        [key: string]: string;
      } | null;
      /** @description Additional body properties to be included in the body of action calls */
      body_properties?: {
        [key: string]: unknown;
      } | null;
      language?: string | null;
      attachments?:
        | {
            id: string;
            name: string;
            size: number;
            type: string;
            url: string;
          }[]
        | null;
      /** @description Context for the AI to be sent with each contact message */
      clientContext?: {
        [key: string]: unknown;
      } | null;
      /** @description Custom data to be sent with each contact message */
      custom_data?: {
        [key: string]: unknown;
      } | null;
      /** @description If there is an active mode, it will be exited and the prompt will be given to the AI for a customized response */
      exit_mode_prompt?: string;
      /** @description A prompt to be given to the AI for a customized response, should be used after an action form is submitted */
      action_form_submitted_prompt?: string;
      initial_messages?: {
        uuid: string;
        content: string;
      }[];
    };
    WidgetSendMessageOutputDto:
      | {
          /** @enum {boolean} */
          success: true;
          code?:
            | string
            | 'session_assigned_to_human_agent'
            | 'response_cancelled';
          autopilotResponse?: {
            /** @enum {string} */
            type: 'text';
            value: {
              error: boolean;
              content: string;
            };
            id?: string;
            mightSolveUserIssue: boolean;
            completelyAndFullyCoveredUserIssue: boolean;
            mode?: {
              id: string;
              name: string;
              slug?: string;
            };
            didExitMode?: boolean;
          };
          uiResponse?: {
            /** @enum {string} */
            type: 'ui';
            value: {
              /** @enum {string} */
              type: 'ui_component';
              request_response?: unknown;
              name: string;
              content?: string;
            };
            mightSolveUserIssue: boolean;
          };
          formSubmission?: {
            name: string;
            id: string;
            openapi?: {
              openapi_spec_id?: string;
              operation_spec?: unknown;
              operation_id?: string;
              operation_method?: string;
            };
            metadata?: unknown;
            required_form_submission?: boolean;
          };
          sessionIsHandedOff?: boolean;
          /** @description WidgetSession */
          session?: {
            /** Format: uuid */
            id: string;
            ticketNumber: number;
            createdAt: string;
            updatedAt: string;
            isHandedOff: boolean;
            isOpened: boolean;
            assignee: {
              kind: components['schemas']['AssigneeKindEnum'];
              name: string | null;
              avatarUrl: string | null;
            };
            channel: string;
            isVerified: boolean;
            lastMessage: string | null;
            modeId: string | null;
            latestStateCheckpointPayload: {
              [key: string]: unknown;
            } | null;
          };
        }
      | {
          /** @enum {boolean} */
          success: false;
          error: {
            code?: string;
            message?: string;
          };
        };
    WidgetSessionAndHistoryDto: {
      /** @description WidgetSession */
      session: {
        /** Format: uuid */
        id: string;
        ticketNumber: number;
        createdAt: string;
        updatedAt: string;
        isHandedOff: boolean;
        isOpened: boolean;
        assignee: {
          kind: components['schemas']['AssigneeKindEnum'];
          name: string | null;
          avatarUrl: string | null;
        };
        channel: string;
        isVerified: boolean;
        lastMessage: string | null;
        modeId: string | null;
        latestStateCheckpointPayload: {
          [key: string]: unknown;
        } | null;
      };
      history: {
        publicId: string;
        type: components['schemas']['MessageTypeEnum'];
        content: {
          text?: string | null;
        };
        sender: {
          kind: components['schemas']['SenderTypeEnum'];
          name?: string | null;
          avatar?: string | null;
        };
        sentAt?: string | null;
        actionCalls?:
          | {
              actionName: string;
              args?: unknown;
              result?: unknown;
              action: {
                name: string;
                id: string;
                openapi?: {
                  openapi_spec_id?: string;
                  operation_spec?: unknown;
                  operation_id?: string;
                  operation_method?: string;
                };
                metadata?: unknown;
                required_form_submission?: boolean;
              };
            }[]
          | null;
        attachments?:
          | {
              id: string;
              name: string;
              size: number;
              type: string;
              url: string;
            }[]
          | null;
        systemMessagePayload: components['schemas']['SystemMessagePayload'];
      }[];
    };
    /** @description WidgetSession */
    WidgetSessionDto: {
      /** Format: uuid */
      id: string;
      ticketNumber: number;
      createdAt: string;
      updatedAt: string;
      isHandedOff: boolean;
      isOpened: boolean;
      assignee: {
        kind: components['schemas']['AssigneeKindEnum'];
        name: string | null;
        avatarUrl: string | null;
      };
      channel: string;
      isVerified: boolean;
      lastMessage: string | null;
      modeId: string | null;
      latestStateCheckpointPayload: {
        [key: string]: unknown;
      } | null;
    };
    WidgetSubmitCsatInputDto: {
      session_id: string;
      score: number;
      feedback?: string;
      system_message_uuid?: string;
    };
    WidgetSubmitCsatOutputDto: {
      success: boolean;
    };
    WidgetVoteDto: {
      /** @enum {string} */
      action: 'upvote' | 'downvote';
      sessionId: string;
      messagePublicId: string;
    };
    WidgetVoteResponseDto: {
      messagePublicId: string | null;
      success: boolean;
    };
    ErrorDto: {
      statusCode?: number;
      message?: string;
      error?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getWidgetConfig: {
    parameters: {
      query?: never;
      header: {
        'X-Bot-Token': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetConfigDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  widgetPrelude: {
    parameters: {
      query?: never;
      header: {
        'X-Bot-Token': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetPreludeDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  getSessions: {
    parameters: {
      query: {
        /** @description A JSON-stringified Record<string, string>. These filters will be compared against the sessions' custom_data */
        filters: string;
        /** @description Pagination cursor to fetch the next set of results */
        cursor?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedWidgetSessionsDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  getSessionHistory: {
    parameters: {
      query?: {
        /** @description The timestamp of the last message received by the widget in order to get any messages after. */
        lastMessageTimestamp?: string;
      };
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetHistoryDto'][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  pollSessionAndHistory: {
    parameters: {
      query?: {
        /** @description The timestamp of the last message received by the widget in order to get any messages after. */
        lastMessageTimestamp?: string;
      };
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetSessionAndHistoryDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  createChatSession: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateWidgetSessionDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetSessionDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  chatSend: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetSendMessageInputDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetSendMessageOutputDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  createStateCheckpoint: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetCreateStateCheckpointInputDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetCreateStateCheckpointOutputDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  uploadFile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The file to upload */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['FileUploadDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UploadWidgetFileResponseDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  uploadFileV2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The file to upload */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['FileUploadDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UploadWidgetFileResponseDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  voteMessage: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetVoteDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetVoteResponseDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  resolveSession: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetResolveSessionInputDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetSessionDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  createUnverifiedContact: {
    parameters: {
      query?: never;
      header: {
        'x-bot-token': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUnverifiedContactDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetContactTokenResponseDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  executeAction: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetActionFormSubmissionInputDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetActionFormSubmissionOutputDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
  submitCsat: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['WidgetSubmitCsatInputDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['WidgetSubmitCsatOutputDto'];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorDto'];
        };
      };
    };
  };
}
